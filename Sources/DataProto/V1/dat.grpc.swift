//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: dat.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Data_V1_DataServiceClient`, then call methods of this protocol to make API calls.
public protocol Data_V1_DataServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Data_V1_DataServiceClientInterceptorFactoryProtocol? { get }

  func push(
    _ request: Data_V1_PushRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Data_V1_PushRequest, Data_V1_PushResponse>
}

extension Data_V1_DataServiceClientProtocol {
  public var serviceName: String {
    return "data.v1.DataService"
  }

  /// Unary call to Push
  ///
  /// - Parameters:
  ///   - request: Request to send to Push.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func push(
    _ request: Data_V1_PushRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Data_V1_PushRequest, Data_V1_PushResponse> {
    return self.makeUnaryCall(
      path: Data_V1_DataServiceClientMetadata.Methods.push.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePushInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Data_V1_DataServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Data_V1_DataServiceNIOClient")
public final class Data_V1_DataServiceClient: Data_V1_DataServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Data_V1_DataServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Data_V1_DataServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the data.v1.DataService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Data_V1_DataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Data_V1_DataServiceNIOClient: Data_V1_DataServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Data_V1_DataServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the data.v1.DataService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Data_V1_DataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Data_V1_DataServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Data_V1_DataServiceClientInterceptorFactoryProtocol? { get }

  func makePushCall(
    _ request: Data_V1_PushRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Data_V1_PushRequest, Data_V1_PushResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Data_V1_DataServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Data_V1_DataServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Data_V1_DataServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePushCall(
    _ request: Data_V1_PushRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Data_V1_PushRequest, Data_V1_PushResponse> {
    return self.makeAsyncUnaryCall(
      path: Data_V1_DataServiceClientMetadata.Methods.push.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePushInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Data_V1_DataServiceAsyncClientProtocol {
  public func push(
    _ request: Data_V1_PushRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Data_V1_PushResponse {
    return try await self.performAsyncUnaryCall(
      path: Data_V1_DataServiceClientMetadata.Methods.push.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePushInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Data_V1_DataServiceAsyncClient: Data_V1_DataServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Data_V1_DataServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Data_V1_DataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Data_V1_DataServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'push'.
  func makePushInterceptors() -> [ClientInterceptor<Data_V1_PushRequest, Data_V1_PushResponse>]
}

public enum Data_V1_DataServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DataService",
    fullName: "data.v1.DataService",
    methods: [
      Data_V1_DataServiceClientMetadata.Methods.push,
    ]
  )

  public enum Methods {
    public static let push = GRPCMethodDescriptor(
      name: "Push",
      path: "/data.v1.DataService/Push",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Data_V1_DataServiceProvider: CallHandlerProvider {
  var interceptors: Data_V1_DataServiceServerInterceptorFactoryProtocol? { get }

  func push(request: Data_V1_PushRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Data_V1_PushResponse>
}

extension Data_V1_DataServiceProvider {
  public var serviceName: Substring {
    return Data_V1_DataServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Push":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Data_V1_PushRequest>(),
        responseSerializer: ProtobufSerializer<Data_V1_PushResponse>(),
        interceptors: self.interceptors?.makePushInterceptors() ?? [],
        userFunction: self.push(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Data_V1_DataServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Data_V1_DataServiceServerInterceptorFactoryProtocol? { get }

  func push(
    request: Data_V1_PushRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Data_V1_PushResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Data_V1_DataServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Data_V1_DataServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Data_V1_DataServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Data_V1_DataServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Push":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Data_V1_PushRequest>(),
        responseSerializer: ProtobufSerializer<Data_V1_PushResponse>(),
        interceptors: self.interceptors?.makePushInterceptors() ?? [],
        wrapping: { try await self.push(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Data_V1_DataServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'push'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePushInterceptors() -> [ServerInterceptor<Data_V1_PushRequest, Data_V1_PushResponse>]
}

public enum Data_V1_DataServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DataService",
    fullName: "data.v1.DataService",
    methods: [
      Data_V1_DataServiceServerMetadata.Methods.push,
    ]
  )

  public enum Methods {
    public static let push = GRPCMethodDescriptor(
      name: "Push",
      path: "/data.v1.DataService/Push",
      type: GRPCCallType.unary
    )
  }
}
